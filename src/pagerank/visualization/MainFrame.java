/*
 * MainFrame.java
 *
 * Created on 13. Januar 2007, 14:35
 */

package pagerank.visualization;

import java.awt.Font;
import java.io.*;
import java.net.URI;
import java.util.ArrayList;
import java.util.Set;
import java.util.Vector;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIDefaults;
import javax.swing.UIManager;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.apache.batik.swing.JSVGCanvas;
import org.apache.batik.swing.svg.LinkActivationEvent;
import org.apache.batik.swing.svg.SVGDocumentLoaderEvent;
import org.apache.batik.swing.svg.SVGDocumentLoaderListener;
import org.apache.batik.swing.svg.SVGUserAgentAdapter;
import pagerank.algorithm.DataStructure;
import pagerank.algorithm.PageRankAlgorithm;
import org.apache.batik.swing.svg.LinkActivationListener;

/**
 *
 * @author  thomas
 */
public class MainFrame extends javax.swing.JFrame implements LinkActivationListener
{
  JSVGCanvas svgGraphics;
  InfoPanel infoPanel;
  
  DataStructure _data;
  PageRankAlgorithm _rank;
  
  /** Creates new form MainFrame */
  public MainFrame()
  {    
    initComponents();
    svgGraphics = new JSVGCanvas(new SVGUserAgentAdapter(), true, true);
    jPanelContainerSVG.add(svgGraphics);
    
    infoPanel = new InfoPanel();
    infoPanel.setVisible(true);
    jPanelContainerInfo.add(infoPanel);
    
    svgGraphics.addLinkActivationListener(this);
  }
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
  private void initComponents()
  {
    jSplitPaneMain = new javax.swing.JSplitPane();
    jPanelContainerSVG = new javax.swing.JPanel();
    jPanelContainerInfo = new javax.swing.JPanel();
    jMenuBarMain = new javax.swing.JMenuBar();
    jMenuMain = new javax.swing.JMenu();
    jMenuItemIterate = new javax.swing.JMenuItem();
    jMenuItemQuit = new javax.swing.JMenuItem();
    jMenuData = new javax.swing.JMenu();
    jMenuItemGoogle = new javax.swing.JMenuItem();
    jMenuItemSave = new javax.swing.JMenuItem();
    jMenuItemLoad = new javax.swing.JMenuItem();
    jMenuItemLoadTest = new javax.swing.JMenuItem();
    jMenuItemAnotherTest = new javax.swing.JMenuItem();
    jMenuHelp = new javax.swing.JMenu();
    jMenuItemLicence = new javax.swing.JMenuItem();
    jMenuItemInfo = new javax.swing.JMenuItem();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    setTitle("Zanysson");
    setFont(new java.awt.Font("Dialog", 0, 12));
    jSplitPaneMain.setDividerLocation(50);
    jSplitPaneMain.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
    jPanelContainerSVG.setLayout(new javax.swing.BoxLayout(jPanelContainerSVG, javax.swing.BoxLayout.X_AXIS));

    jPanelContainerSVG.setBackground(new java.awt.Color(0, 255, 51));
    jSplitPaneMain.setBottomComponent(jPanelContainerSVG);

    jPanelContainerInfo.setLayout(new javax.swing.BoxLayout(jPanelContainerInfo, javax.swing.BoxLayout.X_AXIS));

    jPanelContainerInfo.setBackground(new java.awt.Color(0, 102, 204));
    jSplitPaneMain.setTopComponent(jPanelContainerInfo);

    jMenuMain.setMnemonic('m');
    jMenuMain.setText("Main");
    jMenuMain.setFont(new java.awt.Font("Dialog", 0, 12));
    jMenuItemIterate.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
    jMenuItemIterate.setFont(new java.awt.Font("Dialog", 0, 12));
    jMenuItemIterate.setMnemonic('i');
    jMenuItemIterate.setText("Iterate");
    jMenuItemIterate.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        onIterate2(evt);
      }
    });

    jMenuMain.add(jMenuItemIterate);

    jMenuItemQuit.setFont(new java.awt.Font("Dialog", 0, 12));
    jMenuItemQuit.setMnemonic('q');
    jMenuItemQuit.setText("Quit");
    jMenuItemQuit.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        onQuit(evt);
      }
    });

    jMenuMain.add(jMenuItemQuit);

    jMenuBarMain.add(jMenuMain);

    jMenuData.setMnemonic('d');
    jMenuData.setText("Data");
    jMenuData.setFont(new java.awt.Font("Dialog", 0, 12));
    jMenuItemGoogle.setFont(new java.awt.Font("Dialog", 0, 12));
    jMenuItemGoogle.setMnemonic('g');
    jMenuItemGoogle.setText("Query Google");
    jMenuItemGoogle.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        onGoogle(evt);
      }
    });

    jMenuData.add(jMenuItemGoogle);

    jMenuItemSave.setFont(new java.awt.Font("Dialog", 0, 12));
    jMenuItemSave.setMnemonic('s');
    jMenuItemSave.setText("Save");
    jMenuItemSave.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jMenuItemSaveActionPerformed(evt);
      }
    });

    jMenuData.add(jMenuItemSave);

    jMenuItemLoad.setFont(new java.awt.Font("Dialog", 0, 12));
    jMenuItemLoad.setMnemonic('l');
    jMenuItemLoad.setText("Load");
    jMenuItemLoad.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jMenuItemLoadActionPerformed(evt);
      }
    });

    jMenuData.add(jMenuItemLoad);

    jMenuItemLoadTest.setFont(new java.awt.Font("Dialog", 0, 12));
    jMenuItemLoadTest.setText("Load Test Data 1");
    jMenuItemLoadTest.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        onLoadTest(evt);
      }
    });

    jMenuData.add(jMenuItemLoadTest);

    jMenuItemAnotherTest.setFont(new java.awt.Font("Dialog", 0, 12));
    jMenuItemAnotherTest.setText("Load Test Data 2");
    jMenuItemAnotherTest.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        onTestData2(evt);
      }
    });

    jMenuData.add(jMenuItemAnotherTest);

    jMenuBarMain.add(jMenuData);

    jMenuHelp.setMnemonic('h');
    jMenuHelp.setText("Help");
    jMenuHelp.setFont(new java.awt.Font("Dialog", 0, 12));
    jMenuItemLicence.setFont(new java.awt.Font("Dialog", 0, 12));
    jMenuItemLicence.setMnemonic('l');
    jMenuItemLicence.setText("Licence");
    jMenuItemLicence.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        onLicenceClicked(evt);
      }
    });

    jMenuHelp.add(jMenuItemLicence);

    jMenuItemInfo.setFont(new java.awt.Font("Dialog", 0, 12));
    jMenuItemInfo.setMnemonic('i');
    jMenuItemInfo.setText("Info");
    jMenuItemInfo.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        onInfoClicked(evt);
      }
    });

    jMenuHelp.add(jMenuItemInfo);

    jMenuBarMain.add(jMenuHelp);

    setJMenuBar(jMenuBarMain);

    org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(jSplitPaneMain, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 460, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(jSplitPaneMain, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 325, Short.MAX_VALUE)
    );
    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void jMenuItemLoadActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuItemLoadActionPerformed
  {//GEN-HEADEREND:event_jMenuItemLoadActionPerformed
    JFileChooser chooser = new JFileChooser();
    
    chooser.setDialogTitle("Open data from file");
      
    FileNameExtensionFilter filter = new FileNameExtensionFilter("Zanysson graph file (*.zgf)", "zgf");
    chooser.addChoosableFileFilter(filter);

    int result = chooser.showOpenDialog(this);
    if(result == JFileChooser.APPROVE_OPTION)
    {
      try
      {
        FileInputStream fis = new FileInputStream(chooser.getSelectedFile());
        ObjectInputStream ois = new ObjectInputStream(fis);
        
        DataStructure temp = (DataStructure) ois.readObject();
        
        ois.close();
        fis.close();
        
        boolean firstElement = true;
        DataStructure ds = null;
        _data = null;
        while(temp != null)
        {
          if(firstElement)
          {
            _data = new DataStructure(temp.getURL(), true);
            ds = _data;
            firstElement = false;
          }
          else
          {
            ds = ds.addNewPage(temp.getURL());
          }
          
          Vector<String> links = temp.linkURLs;
          for(String s : links)
          {
            ds.addLink(s);
          }
          
          temp = temp.getNext();
        }
        
        _rank = new PageRankAlgorithm(_data);
        iterate();  
      }
      catch (Exception ex)
      {
        ex.printStackTrace();
        
        JOptionPane.showMessageDialog(this, 
          "<html>Error when trying to load data:<br>" + ex.getMessage() + "</html>",
          "Error",
          JOptionPane.ERROR_MESSAGE);
      }
      
    }
  }//GEN-LAST:event_jMenuItemLoadActionPerformed

  private void jMenuItemSaveActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuItemSaveActionPerformed
  {//GEN-HEADEREND:event_jMenuItemSaveActionPerformed
    if(_data == null)
    {
      JOptionPane.showMessageDialog(this, "No data loaded/generated yet.", "Error", JOptionPane.ERROR_MESSAGE);
    }
    else
    {
      // ask where to store the file
      JFileChooser chooser = new JFileChooser();
      chooser.setDialogTitle("Save data to file");
      
      FileNameExtensionFilter filter = new FileNameExtensionFilter("Zanysson graph file (*.zgf)", "zgf");
      chooser.addChoosableFileFilter(filter);
 
      int result = chooser.showSaveDialog(this);
      if(result == JFileChooser.APPROVE_OPTION)
      {
        FileOutputStream fos;
        try
        {
          fos = new FileOutputStream(chooser.getSelectedFile());
        
          ObjectOutputStream oos = new ObjectOutputStream(fos);
          oos.writeObject(_data);
          oos.close();
          fos.close();
        } catch (Exception ex)
        {
          ex.printStackTrace();
          JOptionPane.showMessageDialog(this, 
            "<html>Error when trying to save data:<br>" + ex.getMessage() + "</html>",
            "Error",
            JOptionPane.ERROR_MESSAGE);
        }
      }
      
    }
  }//GEN-LAST:event_jMenuItemSaveActionPerformed

  private void onLicenceClicked(java.awt.event.ActionEvent evt)//GEN-FIRST:event_onLicenceClicked
  {//GEN-HEADEREND:event_onLicenceClicked
    LicenceDialog dlg = new LicenceDialog(this, true);
    dlg.setVisible(true);
  }//GEN-LAST:event_onLicenceClicked

  private void onInfoClicked(java.awt.event.ActionEvent evt)//GEN-FIRST:event_onInfoClicked
  {//GEN-HEADEREND:event_onInfoClicked
    InfoDialog dlg = new InfoDialog(this, true);
    dlg.setVisible(true);
  }//GEN-LAST:event_onInfoClicked

  private void onGoogle(java.awt.event.ActionEvent evt)//GEN-FIRST:event_onGoogle
  {//GEN-HEADEREND:event_onGoogle
    GoogleDialog dlg = new GoogleDialog(this, true);
    dlg.setVisible(true);
    
    _data = dlg.getResult();
    
    this.setTitle("Zanysson - " + dlg.getSearchedText());
    
    if(_data != null)
    {
      _rank = new PageRankAlgorithm(_data);
      iterate();
    }
    
  }//GEN-LAST:event_onGoogle

  private void onTestData2(java.awt.event.ActionEvent evt)//GEN-FIRST:event_onTestData2
  {//GEN-HEADEREND:event_onTestData2
    _data = new DataStructure("http://0", true);
    
    
    DataStructure aktuell = _data;
    aktuell = aktuell.addNewPage("http://1");
    aktuell.addLink("http://0");
    aktuell.addLink("http://4");
    
    aktuell = aktuell.addNewPage("http://2");
    aktuell.addLink("http://0");
    aktuell.addLink("http://3");
    
    aktuell = aktuell.addNewPage("http://3");
    aktuell.addLink("http://0");
    aktuell.addLink("http://2");
    
    
    aktuell = aktuell.addNewPage("http://4");
    aktuell.addLink("http://0");
    aktuell.addLink("http://5");
    
    aktuell.addNewPage("http://5");
    
    _rank = new PageRankAlgorithm(_data);
    
    iterate();
    
  }//GEN-LAST:event_onTestData2

  private void iterate()
  {
    if(_rank != null && _data != null)
    {
      _rank.makeAnIteration();
      
      
      generateDotFiles(_data);
      if(executeDot())
      {
        loadImages();
      }
    }
  }
  
  private void onIterate2(java.awt.event.ActionEvent evt)//GEN-FIRST:event_onIterate2
  {//GEN-HEADEREND:event_onIterate2
    iterate();
  }//GEN-LAST:event_onIterate2

  private void generateDotFiles(DataStructure data)
  {
   
    // get maximal and minimal pagerank
    double maxPR = Double.MIN_VALUE;
    double minPR = Double.MAX_VALUE;
    
    DataStructure curMinMax = data;
    while(curMinMax != null)
    {
      double val = curMinMax.getPageRank();
      
      maxPR = Math.max(maxPR, val);
      minPR = Math.min(minPR, val);
      
      curMinMax = curMinMax.getNext();
    }
    
    File f = new File("pagerank.dot");
    
    try
    {
      
      f.createNewFile();

      FileWriter writer = new FileWriter(f);
      
      // write header
      writer.write("digraph {\n\n");
      writer.write("node [fontname=\"normal normal Times\"];\n");
      
      
      // write out transistions of each node
      DataStructure current = data;
      
      
      while(current != null)
      {
        int curID = current.getID();
        String curUrl = current.getURL();
        double pR = current.getPageRank();
        String pRAsString = String.format("%f", pR);
        
        int pRAsInt = (int) ( ( (pR- minPR) / (maxPR - minPR) ) * 255.0 );
        int colRed = pRAsInt;
        int colGreen = 255 - pRAsInt;
        int colBlue = 0;
        
        
        String colRedString = Integer.toHexString(colRed);
        String colGreenString = Integer.toHexString(colGreen);
        String colBlueString = Integer.toHexString(colBlue);
        
        if(colRedString.length() == 1)
          colRedString = "0" + colRedString;
        
        if(colGreenString.length() == 1)
          colGreenString = "0" + colGreenString;
        
        if(colBlueString.length() == 1)
          colBlueString = "0" + colBlueString;
        
        writer.write("\"" + curID + "\" [style=filled,color=\"#" 
          + colRedString
          + colGreenString
          + colBlueString 
          + "\" URL=\"" + curUrl + "#" + pRAsString + "\"];\n");
        
        // transitions
        for(Integer i : current.linkIDs) // introducing foreach
        {
          writer.write("\"" + curID + "\" -> \"" + i + "\";\n");
        }
        
        current = current.getNext();
      }
      
      // write footer
      writer.write("\n}\n");
      
      writer.close();
    }
    catch(IOException ioE)
    {
      ioE.printStackTrace();
    }
    
  }
  
  private boolean executeDot()
  {
    try
    {
      String pathToDot = "dot"; // should work on any well configured system
      
      Process p = Runtime.getRuntime().exec(pathToDot + " -Tsvg pagerank.dot -o pagerank.svg");
      p.waitFor();
      
      if(p.exitValue() == 0)
      {
        return true;
      }
      else
      {
        return false;
      }
    }
    catch(Exception ex)
    {
      ex.printStackTrace();
    }
    
    return false;
  }
  
  private void loadImages()
  {
    try
    {
      File f = new File("pagerank.svg");
      if(f.exists())
      {
        svgGraphics.loadSVGDocument(f.toURI().toString());
      }
    }
    catch(Exception ex)
    {
      ex.printStackTrace();
    }
  }
  
  private void onLoadTest(java.awt.event.ActionEvent evt)//GEN-FIRST:event_onLoadTest
  {//GEN-HEADEREND:event_onLoadTest
    _data = new DataStructure("http://0", true);
    _data.addLink("http://4");
    
    DataStructure aktuell = _data;
    aktuell = aktuell.addNewPage("http://1");
    aktuell.addLink("http://0");
    aktuell.addLink("http://6");
    
    aktuell = aktuell.addNewPage("http://2");
    aktuell.addLink("http://0");
    aktuell.addLink("http://3");
    
    aktuell = aktuell.addNewPage("http://3");
    aktuell.addLink("http://0");
    aktuell.addLink("http://2");
    
    aktuell = aktuell.addNewPage("http://4");
    aktuell.addLink("http://5");
    
    aktuell = aktuell.addNewPage("http://5");
    aktuell.addLink("http://4");
    
    aktuell = aktuell.addNewPage("http://6");
    aktuell.addLink("http://0");
    aktuell.addLink("http://7");
    
    aktuell.addNewPage("http://7");
    _rank = new PageRankAlgorithm(_data);
    
    iterate();
    
//    for(int i=0; i < 10; i++)
//    {
//      rank.makeAnIteration();
//    }
    
    
    
  }//GEN-LAST:event_onLoadTest

  private void onQuit(java.awt.event.ActionEvent evt)//GEN-FIRST:event_onQuit
  {//GEN-HEADEREND:event_onQuit
    System.exit(0);
  }//GEN-LAST:event_onQuit
  
  /**
   * @param args the command line arguments
   */
  public static void main(String args[])
  {
    plainFonts();
    
    java.awt.EventQueue.invokeLater(new Runnable()
    {
      public void run()
      {          
        MainFrame m = new MainFrame();
        
        m.setVisible(true);
      }
    });
  }

  /** Set every default font to plain-mode (would be bold otherwise in most cases) */
  public static void plainFonts()
  { 
    UIDefaults uidef = UIManager.getLookAndFeel().getDefaults();
    for(Object obj : uidef.keySet())
    {
      String s = obj.toString();
      if(s.endsWith(".font"))
      {
        UIManager.put(s, ((Font) uidef.getFont(s)).deriveFont(Font.PLAIN));
      }
    } 
  }
  
  public void linkActivated(LinkActivationEvent linkActivationEvent)
  {
    String input = linkActivationEvent.getReferencedURI().toString();
    
    String[] a = input.split("#");
    
    infoPanel.setURL(a[0]);
    infoPanel.setPageRank(a[1]);
  }

  
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JMenuBar jMenuBarMain;
  private javax.swing.JMenu jMenuData;
  private javax.swing.JMenu jMenuHelp;
  private javax.swing.JMenuItem jMenuItemAnotherTest;
  private javax.swing.JMenuItem jMenuItemGoogle;
  private javax.swing.JMenuItem jMenuItemInfo;
  private javax.swing.JMenuItem jMenuItemIterate;
  private javax.swing.JMenuItem jMenuItemLicence;
  private javax.swing.JMenuItem jMenuItemLoad;
  private javax.swing.JMenuItem jMenuItemLoadTest;
  private javax.swing.JMenuItem jMenuItemQuit;
  private javax.swing.JMenuItem jMenuItemSave;
  private javax.swing.JMenu jMenuMain;
  private javax.swing.JPanel jPanelContainerInfo;
  private javax.swing.JPanel jPanelContainerSVG;
  private javax.swing.JSplitPane jSplitPaneMain;
  // End of variables declaration//GEN-END:variables
  
}
